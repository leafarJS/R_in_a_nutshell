# de archivos en C o identificadores de archivos en Perl). Puede crear conexiones
# a archivos, URL, archivos comprimidos zip, archivos comprimidos gzip, archivos
# comprimidos bzip, conductos de Unix, sockets de red y FIFO (primero en entrar,
# primero en salir) objetos. Incluso puede leer desde el Portapapeles del sistema
# (para pegar datos en R).
consumption.connection <- gzfile(description="consumption.rda",open="r")
data(consumption.connection)
consumption.connection
#CONNECTIONS
# Conexiones
# R incluye un tipo de objeto especial para recibir datos de (o enviar datos a)
# aplicaciones o archivos fuera del entorno R. (Las conexiones son como punteros
# de archivos en C o identificadores de archivos en Perl). Puede crear conexiones
# a archivos, URL, archivos comprimidos zip, archivos comprimidos gzip, archivos
# comprimidos bzip, conductos de Unix, sockets de red y FIFO (primero en entrar,
# primero en salir) objetos. Incluso puede leer desde el Portapapeles del sistema
# (para pegar datos en R).
consumption.connection <- gzfile(description="data/consumption.rda", open="r")
consumption.connection
read(consumption.connection)
close(consumption.connection)
class(consumption.connection)
comment(consumption.connection)
dim(consumption.connection)
dimnames(consumption.connection)
row.names(consumption.connection)
tsp(consumption.connection)
levels(consumption.connection)
m <- matrix(data = 1:12,
nrow = 4,
ncol = 3,
dimnames = list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
attributes(m)
dim(m)
colnames(m)
rownames(m)
dim(m) <- NULL
m
class(m)
typeof(m)
class(m)
m <- matrix(data = 1:12,
nrow = 4,
ncol = 3,
dimnames = list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
class(m)
attributes(m)
dim(m)
colnames(m)
rownames(m)
dim(m) <- NULL
m
class(m)
typeof(m)
a <- array(1:12, dim = c(3,4))
a
b <- 1:12
b
a[2,2]
b[2,2]
a == b
all.equal(a, b)
identical(a, b) # false
dim(b) <- c(3,4)
a[2,2]
b[2,2]
all.equal(a, b)
all.equal(a, b)
identical(a, b)
x <- c(1,2,3,4,5)
typeof(x)
class(x)
#now create a vector by removing the class
eye_colors.integer.vector <- unclass(eye_colors)
eye_colors.integer.vector
#FACTORS
eye_colors <- c("brown", "blue", "blue", "blue", "green", "brown", "brown", "brown")
eye_colors
eye_colors <-factor(c("brown", "blue", "blue", "blue", "green", "brown", "brown", "brown"))
#The levels function shows all the levels from a factor:
eye_colors
levels(eye_colors)
#Para sortear estos problemas, puede usar un factor ordenado para representar
#la respuesta de esta encuesta. Aquí hay un ejemplo:
survey_result <-factor(c("Disagree","Neutral","Strongly Disagree",
"Neutral","Agree","Strongly Agree",
"Disagree","Strongly Agree","Neutral",
"Strongly Disagree","Neutral","Agree"),
levels = c("Strongly Disagree", "Disagree",
"Neutral", "Agree", "Strongly Agree"),
ordered = TRUE)
survey_result
#use the eye colors vector we used above
eye_colors
class(eye_colors)
#now create a vector by removing the class
eye_colors.integer.vector <- unclass(eye_colors)
eye_colors.integer.vector
attr(,"levels")
#FACTORS
eye_colors <- c("brown", "blue", "blue", "blue", "green", "brown", "brown", "brown")
eye_colors
eye_colors <-factor(c("brown", "blue", "blue", "blue", "green", "brown", "brown", "brown"))
#The levels function shows all the levels from a factor:
eye_colors
levels(eye_colors)
#Para sortear estos problemas, puede usar un factor ordenado para representar
#la respuesta de esta encuesta. Aquí hay un ejemplo:
survey_result <-factor(c("Disagree","Neutral","Strongly Disagree",
"Neutral","Agree","Strongly Agree",
"Disagree","Strongly Agree","Neutral",
"Strongly Disagree","Neutral","Agree"),
levels = c("Strongly Disagree", "Disagree",
"Neutral", "Agree", "Strongly Agree"),
ordered = TRUE)
survey_result
#use the eye colors vector we used above
eye_colors
class(eye_colors)
#now create a vector by removing the class
eye_colors.integer.vector <- unclass(eye_colors)
eye_colors.integer.vector
#attr(,"levels")
class(eye_colors.integer.vector)
#t’s possible to change this back to a factor by setting the class attribute:
class(eye_colors.integer.vector) <- "factor"
eye_colors.integer.vector
class(eye_colors.integer.vector)
eye_colors.integer.vector
attr(, "levels")
v <- as.integer(c(1,1,1,2,1,2,2,3,1))
levels(v) <- c("what", "who", "why")
class(v) <- "factor"
v
class(quote(x))
typeof(quote(x))
x <- 1
x <- 1
x <- 2
x <- 3
v <- c(x, y, z)
v
x <- 1
y <- 2
z <- 3
v <- c(x, y, z)
v
# has already defined, so chaging x does not change v
x <- 10
v
x <- 4
y <- 5
z <- 7
v <- quote(c(x, y, z))
v
eval(v)
x <- 8
eval(v)
x <- 10
y <- 11
z <- 12
delayedAssign("v", c("x", "y", "z"))
eval(delayedAssign())
delayedAssign("v", c("x", "y", "z"))
x <- 0
v
x <- 10
y <- 11
z <- 12
delayedAssign("v", c("x", "y", "z"))
x <- 0
v
x <- 4
y <- 5
z <- 7
v <- quote(c(x, y, z))
v
eval(v)
x <- 8
eval(v)
# También es posible crear un objeto de promesa en R para retrasar la evaluación
# de una variable hasta que se necesite (por primera vez). Puede crear un objeto
# de promesa a través de la función delayAssign:
#x <- 10
#y <- 11
#z <- 12
delayedAssign("v", c("x", "y", "z"))
x <- 0
v
x <- 4
y <- 5
z <- 7
v <- quote(c(x, y, z))
v
eval(v)
x <- 8
eval(v)
# También es posible crear un objeto de promesa en R para retrasar la evaluación
# de una variable hasta que se necesite (por primera vez). Puede crear un objeto
# de promesa a través de la función delayAssign:
#x <- 10
#y <- 11
#z <- 12
delayedAssign("v", c("x", "y", "z"))
x <- 0
v
x <- 1
y <- 2
z <- 3
v <- c(x, y, z)
v
# has already defined, so chaging x does not change v
x <- 10
v
# Es posible retrasar la evaluación de una expresión para que los símbolos no se
# evalúen inmediatamente:
x <- 4
y <- 5
z <- 7
v <- quote(c(x, y, z))
v
eval(v)
x <- 8
eval(v)
# También es posible crear un objeto de promesa en R para retrasar la evaluación
# de una variable hasta que se necesite (por primera vez). Puede crear un objeto
# de promesa a través de la función delayAssign:
#x <- 10
#y <- 11
#z <- 12
delayedAssign("v", c("x", "y", "z"))
x <- 0
v
delayedAssign("v", c(x, y, z))
x <- 0
v
x <- 10
y <- 11
z <- 12
delayedAssign("v", c(x, y, z))
x <- 0
v
f.6 <- function(x) {
return(x^2 + 3)
}
f.6(30)
f.6 <- function(x) {
return(x^2 + 3)
}
f.6(30)
f.7 <- function(x) {
x^2 + 3
}
f.7(30)
x <- 1:10
sapply(x, sqrt)
sapply(x, sqrt, digits = 2)
sapply(x, sqrt)
apply.to.three <- function(f){f(3)}
apply.to.three(function(x){x ** 7})
x <- c(1,2,3,4,5,6,7,8,9,10)
sapply(x, function(x){x + 1})
v <- 1:20
w <- NULL
for (i in 1:length(v)) {
w[i] <- v[i]^2
}
w
v <- 1:20
w <- sapply(v, function(i){i^2})
w
(function(x){x + 1})(100)
(function(x){sqrt(x) + exp(2) - 1})(100)
args(sin)
function(x)
args('?')
args(args)
args(lm)
f.8 <- function(x, y=1, z=2) {x + y +z}
f.formals <- formals(f.8)
f.formals
f.formals$x <- 1000
formals(f.8) <- f.formals
args(f.8)
f.9 <- function(x = 100, y = 200, z = 300){
return(x + y + z)
}
f.9
body(f.9)
body(f.9) <- expresssion({ x * y * z})
body(f.9)
body(f.9) <- expresssion({ x * y * z})
body(f.9) <- expresssion({ x * y * z})
body(f.9) <- expression({ x * y * z})
f.9
add.the.log <- function(first, second){
first + log(second)
}
add.the.log(second = sqrt(10), first = exp(10))
add.the.log(second = 1 , f.9)
add.the.log(second = 1 , first = f.9)
add.the.log(second = sqrt(10), first = exp(10))
add.the.log(s = sqrt(10), f = exp(10))
add.the.log(sqrt(10),exp(10))
add.the.log(second = sqrt(10), first = exp(10))
add.the.log(s = sqrt(10), f = exp(10))
add.the.log(sqrt(10), exp(10))
add.the.log(exp(10), sqrt(10))
f.10 <- function(arg1=10, arg2=20){
print(paste("arg1:", arg1))
print(paste("arg2:", arg2))
}
f.10(arg = 1000)
f.10(arg1 = 1000)
f.10(arg1 = 2000, arg2 = 3000)
f.10()
#CHANGES TO OTHER ENVIRONMENTS
X
x #Error: object 'X' not found
doesnt.assing.x <-function(i){x <- i}
doesnt.assing.x(4)
x #Error: object 'X' not found
doesnt.assing.x <-function(i){x <- i}
doesnt.assing.x(4)
assigns.x <-function(i){x <<- i}
assigns.x(1000)
x
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start.as.POSIXct("12/10/2022 0:00:00",
tz = "GMT",
format = "%m/%d/%Y %H:%M%S"),
end = as.POSIXct("13/10/2022 11:10:05",
tz = "GMT",
format = "%m/%d/%Y %H:%M:%S")
)
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start = as.POSIXct("12/10/2022 0:00:00",
tz = "GMT",
format = "%m/%d/%Y %H:%M%S"),
end = as.POSIXct("13/10/2022 11:10:05",
tz = "GMT",
format = "%m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start = as.POSIXct("12/10/2022 0:00:00",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S"),
end = as.POSIXct("13/10/2022 11:10:05",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start = as.POSIXct("13/10/2022 0:00:00",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S"),
end = as.POSIXct("13/10/2022 11:10:05",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("TimeSeries",
+ representation(
+ data="numeric",
setClass("TimeSeries",
representation(
data="numeric",
start="POSIXct",
end="POSIXct"
))
my.TimeSeries <- new("TimeSeries",
data=c(1, 2, 3, 4, 5, 6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.TimeSeries
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start=as.POSIXct("13/10/2022 0:00:00",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S"),
end = as.POSIXct("13/10/2022 11:10:05",
tz = "GMT",
format = "m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("TimeSeries",
representation(
data="numeric",
start="POSIXct",
end="POSIXct"
))
my.TimeSeries <- new("TimeSeries",
data=c(1, 2, 3, 4, 5, 6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.TimeSeries
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("TimeSeries",
representation(
data="numeric",
start="POSIXct",
end="POSIXct"
))
my.TimeSeries <- new("TimeSeries",
data=c(1, 2, 3, 4, 5, 6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.TimeSeries
validObject(my.TimeSeries)
my.ts <- ts(data = c(1,2,3,4,5), start = (2009,2), frequency=12)
my.ts
my.ts <- ts(data = c(1,2,3,4,5), start = (2009,2), frequency=12)
attributes(my.ts)
my.ts <- ts(data=c(1, 2, 3, 4, 5), start=c(2009, 2), frequency=12)
my.ts
attributes(my.ts)
typeof(my.ts)
unclass(my.ts)
plot(my.ts)
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo posicion, salarios)
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo, posicion, salarios)
top.5.salarios
top.5.salarios <- edit(top.5.salarios)
fix(top.5.salarios)
View(top.5.salarios)
save(top.5.salarios, file = "/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios.RData"
)
load("~/top.5.salarios.RData")
load("~/top.5.salarios.RData")
load("~/top.5.salarios.RData", useBytes = TRUE)
save(top.5.salarios, file = "~/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios.RData"
)
load("~/top.5.salarios.RData", useBytes = TRUE)
save(top.5.salarios, file = "~/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios_1.RData"
)
load("~/top.5.salarios.RData", useBytes = TRUE)
load("~/top.5.salarios.RData")
