end="POSIXct"
))
my.TimeSeries <- new("TimeSeries",
data=c(1, 2, 3, 4, 5, 6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.TimeSeries
setClass("Time.series",
representation(
data = "numeric",
start = "POSIXct",
end = "POSIXct"
))
my.time.serie <- new("Time.series",
data = c(1,2,3,4,5,6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.time.serie
setClass("TimeSeries",
representation(
data="numeric",
start="POSIXct",
end="POSIXct"
))
my.TimeSeries <- new("TimeSeries",
data=c(1, 2, 3, 4, 5, 6),
start=as.POSIXct("07/01/2009 0:00:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S"),
end=as.POSIXct("07/01/2009 0:05:00", tz="GMT",
format="%m/%d/%Y %H:%M:%S")
)
my.TimeSeries
validObject(my.TimeSeries)
my.ts <- ts(data = c(1,2,3,4,5), start = (2009,2), frequency=12)
my.ts
my.ts <- ts(data = c(1,2,3,4,5), start = (2009,2), frequency=12)
attributes(my.ts)
my.ts <- ts(data=c(1, 2, 3, 4, 5), start=c(2009, 2), frequency=12)
my.ts
attributes(my.ts)
typeof(my.ts)
unclass(my.ts)
plot(my.ts)
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo posicion, salarios)
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo, posicion, salarios)
top.5.salarios
top.5.salarios <- edit(top.5.salarios)
fix(top.5.salarios)
View(top.5.salarios)
save(top.5.salarios, file = "/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios.RData"
)
load("~/top.5.salarios.RData")
load("~/top.5.salarios.RData")
load("~/top.5.salarios.RData", useBytes = TRUE)
save(top.5.salarios, file = "~/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios.RData"
)
load("~/top.5.salarios.RData", useBytes = TRUE)
save(top.5.salarios, file = "~/top.5.salarios.RData")
save(top.5.salarios,
file = "C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios_1.RData"
)
load("~/top.5.salarios.RData", useBytes = TRUE)
load("~/top.5.salarios.RData")
#IMPORTING DATA FROM EXTERNAL FILES
acc.apple = read.table("data/AAPL.csv",
header = TRUE, sep = ",",
quote = "\"")
acc.apple
data.url = read.csv("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv")
data.url = read.csv(paste("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv", sep=""))
sp500 <- read.csv(paste("http://ichart.finance.yahoo.com/table.csv?",
"s=%5EGSPC&a=03&b=1&c=1999&d=03&e=1&f=2009&g=m&ignore=.csv", sep=""))
data.url = read.table("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv", sep="")
data.url = read.table("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv",
header = TRUE, sep = ",",
quote = "\"")
sample <- read.table("http://aprender.uib.es/Rdir/pearson.txt", header=TRUE, quote="\"")
View(sample)
data.url = read.table("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv.",
header = TRUE, sep = ",",
quote = "\"")
data.url = read.table(:URL "http://ichart.finance.yahoo.com/table.csv
data.url = read.table(URL, "http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv.",
header = TRUE, sep = ",",
quote = "\"")
data.url = read.table(URL, "http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv",
header = TRUE, sep = ",",
quote = "\"")
data.url = read.table2(URL, "http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv",
header = TRUE, sep = ",",
quote = "\"")
data.url = read.table2("http://ichart.finance.yahoo.com/table.csv
?s=%5EGSPC&a=01&b=1&c=1999&d=12&e=12&f=2022&g=m&ignore=.csv",
header = TRUE, sep = ",",
quote = "\"")
data.url <- read.table("http://aprender.uib.es/Rdir/pearson.txt", header=TRUE, quote="\"")
data.url
class(data.url)
View(data.url)
install.packages("RODBC")
#install.packages("RODBC")
library(RODBC)
bbdd <- odbcConnect("bbdb")
bbdd <- odbcDriverConnect("DSN=bbdb")
bbdd <- odbcDriverConnect("DSN=bbdb")
odbcGetInfo(bbdb)
bbdd <- odbcConnect("bbdb")
odbcGetInfo(bbdb)
x <- c("a", "b", "c", "d", "e")
y <- c("A", "B", "C", "D", "E")
paste(x, y)
paste(x, y , sep = "-")
paste(x,y, sep = "-", collapse = "#")
top.5.salaries <- load("~/top.5.salarios.RData")
view(top.5.salaries)
View(top.5.salarios)
top.5.salaries
top.5.salaries <- load("~/top.5.salarios.RData")
top.5.salaries
load("~/top.5.salarios.RData")
top.5.salaries <- load("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
View(top.5.salarios)
top.5.salaries <- read.csv("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
top.5.salaries <- read.dcf("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
top.5.salaries <- read.table("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
top.5.salaries <- read.ftable("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
top.5.salaries <- load("top.5.salarios.RData")
top.5.salaries
View(top.5.salaries)
year <- c(2008,2008,2008,2008,2022)
rank <- c(1,2,3,4,5)
more.cols <- data.frame(year, rank)
cbind(top.5.salaries, more.cols)
top.5.salaries <- readRDS("top.5.salarios.RData")
top.5.salaries <- readRDS("top.5.salarios.RData")
top.5.salaries
View(top.5.salarios)
cbind(top.5.salaries, mo
cbind(top.5.salaries, mo
top.5.salaries <- readRDS("top.5.salarios.RData")
top.5.salaries <- data("top.5.salarios.RData")
top.5.salaries
year <- c(2008,2008,2008,2008,2022)
rank <- c(1,2,3,4,5)
more.cols <- data.frame(year, rank)
cbind(top.5.salaries, more.cols)
View(top.5.salaries)
load("C:/Users/Administrador/Desktop/R_in_a_Nutshell/top.5.salarios.RData")
top.5.salaries <- load("./data/top.5.salarios.RData")
top.5.salaries <- load("./data/top.5.salarios.RData")
year <- c(2008,2008,2008,2008,2022)
rank <- c(1,2,3,4,5)
more.cols <- data.frame(year, rank)
cbind(top.5.salaries, more.cols)
top.5.salaries <- as.data.frame(load("./data/top.5.salarios.RData"))
year <- c(2008,2008,2008,2008,2022)
rank <- c(1,2,3,4,5)
more.cols <- data.frame(year, rank)
cbind(top.5.salaries, more.cols)
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo, posicion, salarios)
top.5.salarios
salarios = c(15000,18000,20000,12000,45200)
posicion = c("Q4", "Q3", "Q2", "Q1", "Q5")
equipo = c("colts", "patriots", "panthers", "bengals", "giants")
nombre = c("jorge", "rafael", "miguel", "angel", "luis")
apellido = c("callejo", "flores", "guisbert", "tarqui", "linares")
top.5.salarios <- data.frame(nombre, apellido, equipo, posicion, salarios)
top.5.salarios
cbind(top.5.salarios, more.cols)
year <- c(2008,2008,2008,2008,2022)
rank <- c(1,2,3,4,5)
more.cols <- data.frame(year, rank)
cbind(top.5.salarios, more.cols)
dbListFields(con, "Batting")
dbListFields(con,"Master")
dbListFields(con,"Master")
db <- dbListFields(con,"Master")
View(db)
load("C:/Users/Administrador/Desktop/R_in_a_Nutshell/.RData")
x <- 1:20
dim(x) <- c(5,4)
x
apply(x, 1, FUN = max)
apply(X=x, MARGIN = 2, FUN = max)
apply(x, 1, FUN = min)
apply(x, 2, FUN = min)
dim(x)<- c(3,3,3)
x
x <- 1:27
dim(x)<- c(3,3,3)
x
apply(x, , 1, FUN = paste, collapse = ",")
apply(x, 1, FUN = paste, collapse = ",")
apply(x, 2, FUN = paste, collapse = ",")
apply(x, 3, FUN = paste, collapse = ",")
apply(x, 1, FUN = paste, collapse = "0")
apply(x, 2, FUN = paste, collapse = "0")
apply(x, 3, FUN = paste, collapse = "0")
apply(x, c(1,2), FUN = paste, collapse = ",")
x
x <- as.list(1:5)
x
lapply(x, function(x){2^x})
lapply(x, function(x){return(exp(x))})
y <- data.frame(x=1:5, y= 6:10)
y
lapply(y, function(y){sqrt(x)})
lapply(y, function(y){sqrt(y)})
lapply(y, function(y){return(exp(x) * y)})
lapply(c(x,y), function(x,y){return(exp(x) * y)})
lapply(y, function(y){range(y)})
lapply(y, function(y){return(2^y)})
mapply(paste, c(1,2,3,4,5),
c(11,22,33,44,55),
c(111,222,333,444,555),
MoreArgs = list(sep="|"))
title <- c("ARRAY OUTPUT", "DATAFRAME OUTPUT", "LIST OUTPUT", "DISCARD OUTPUT")
title <- c("INPUT","ARRAY OUTPUT", "DATAFRAME OUTPUT", "LIST OUTPUT", "DISCARD OUTPUT")
arr <- c("aaply", "adply", "alply", "a_ply")
dat.fra <- c("Data Frame", "daply", "ddply", "dlply", "d_ply")
lista <- c("List", "laply", "ldply", "llply", "d_ply")
tabla_plyr <- data.frame(title, arr, dat.fra, list)
title <- c("ARRAY OUTPUT", "DATAFRAME OUTPUT", "LIST OUTPUT", "DISCARD OUTPUT")
arr <- c("Array","aaply", "adply", "alply", "a_ply")
dat.fra <- c("Data Frame", "daply", "ddply", "dlply", "d_ply")
lista <- c("List", "laply", "ldply", "llply", "d_ply")
tabla_plyr <- data.frame(title, arr, dat.fra, list)
tabla_plyr <- data.frame(title, arr, dat.fra, lista)
title <- c("INPUT","ARRAY OUTPUT", "DATAFRAME OUTPUT", "LIST OUTPUT", "DISCARD OUTPUT")
arr <- c("Array","aaply", "adply", "alply", "a_ply")
dat.fra <- c("Data Frame", "daply", "ddply", "dlply", "d_ply")
lista <- c("List", "laply", "ldply", "llply", "d_ply")
tabla_plyr <- data.frame(title, arr, dat.fra, lista)
tabla_plyr
x <- c(2,4,6,8,10)
lapply(x, function(x){x+1})
#equivalente is llply
llply(.data =d, .fun = function(x){x+1})
library(pl)
library(plyr)
x <- c(2,4,6,8,10)
lapply(x, function(x){x+1})
#equivalente is llply
llply(.data =d, .fun = function(x){x+1})
#equivalente is llply
llply(.data =d, .fun = function(x)x+1)
#equivalente is llply
llply(.data =x, .fun = function(x)x+1)
apply(x, 1, FUN = paste, collapse = ",")
x <- 1:12
x <- 1:12
dim(x) <- (3,3)
apply(x, 1, FUN = paste, collapse = ",")
x <- 1:12
dim(x) <- c(3,3)
x <- 1:12
dim(x) <- c(3,4)
apply(x, 1, FUN = paste, collapse = ",")
#equivalente aaply
aaply(.data = x, margins = 1, .fun = paste, collapse = ",")
#equivalente aaply
aaply(.data = x, .margins = 1, .fun = paste, collapse = ",")
#data frame  in, matrix out
t(sapply(x, function(x){2^x}))
#equivalent (but note the additional labels)
aaply(d, function(x){x-x}, .margins = 2)
#equivalent (but note the additional labels)
aaply(x, function(x){x-x}, .margins = 2)
x <- seq(2:10)
x
x <- seq(1:10)
x
x <- seq(1:10,2)
x
x <- seq(1:12)
x
shingle(x, intervals = sort(unique(x)))
library(lattice)
shingle(x, intervals = sort(unique(x)))
x <- c(1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,5)
x
shingle(x, intervals = sort(unique(x)))
equal.count(x, intervals = max(x))
equal.count(x, intervals = sort(max(x)))
equal.count(x, intervals = sort(unique(x)))
library(nutshell)
install.packages("nutshell")
setRepositories()
setRepositories()
data <- load('data/batting.2008.rda')
data <- load('data/batting.2008.rda')
View(data)
View(batting.2008)
# first, add batting average to the data frame:
batting.2008.pr <- transform(batting.2008, AVG = H/AB)
View(batting.2008.pr)
data <- load('data/batting.2008.rda')
# first, add batting average to the data frame:
batting.2008.pr <- transform(batting.2008, AVG = H/AB)
View(batting.2008.AB)
# now, select a subset of players with over 100 AB (for some
# statistical significance):
batting.2008.over100AB <- subset(batting.2008.AB, subset(AB > 100))
data <- load('data/batting.2008.rda')
# first, add batting average to the data frame:
batting.2008.pr <- transform(batting.2008, AVG = H/AB)
View(batting.2008.AB)
data <- load('data/batting.2008.rda')
# first, add batting average to the data frame:
batting.2008.AB <- transform(batting.2008, AVG = H/AB)
View(batting.2008.AB)
# now, select a subset of players with over 100 AB (for some
# statistical significance):
batting.2008.over100AB <- subset(batting.2008.AB, subset(AB > 100))
# now, select a subset of players with over 100 AB (for some
# statistical significance):
batting.2008.over100AB <- subset(batting.2008.AB, subset=(AB > 100))
# finally, split the results into 10 bins:
battingavg.2008.bins <- cut(batting.2008.over100AB$AVG, breaks = 10)
table(battingavg.2008.bins)
head(batting.2008.AB)
str(batting.2008.AB)
library(lat)
library(lattice)
make.groups(...)
hat.sizes <- seq(from = 6.25, to = 7.75, by = .25)
hat.sizes
hat.sizes <- seq(from = 6.25, to = 7.75, by = .25)
length(hat.sizes)
pants.sizes <- c(30,31,32,33,34,36,38,40)
length(pants.sizes)
shoe.sizes = seq(from = 7, to = 12)
length(shoe.sizes)
make.groups(hat.sizes, pants.sizes, shoe.sizes)
bateo <- load('data/batting.2008.rda')
str(bateo)
data <- load('data/batting.2008.rda')
bateo.2008 <- transform(batting.2008, AVG = (AVG+AVG-AVG))
load("C:/Users/Administrador/Desktop/R_in_a_Nutshell/data/batting.2008.rda")
bateo.2008 <- transform(batting.2008, AVG = H/AB)
str(bateo.2008)
bateo.nombre.2008 <- bateo.2008[bateo.2008$yearID == 2008]
bateo.2008 <- transform(batting.2008, AVG = H/AB)
str(bateo.2008)
bateo.nombre.2008 <- bateo.2008[bateo.2008$yearID == 2008]
bateo.nombre.2008 <- bateo.2008[bateo.2008$yearID == 2008,]
summary(bateo.nombre.2008)
summary(bateo.nombre.2008$yearID)
bateo.name.2008.short <- bateo.2008[bateo.2008$yearID == 2008, c("nameFirst", "nameLast", "AB", "H", "BB")]
bateo.name.2008.short
data <- load('data/batting.2008.rda')
bateo.2008 <- transform(batting.2008, AVG = H/AB)
str(bateo.2008)
bateo.w.names.2008 <- subset(bateo.2008, yearID == 2008)
bateo.w.names.2008
bateo.name.2008.short <-subset(bateo.2008, yearID == 2008, c("nameFirst", "AB", "H"))
bateo.name.2008.short
bateo.2008[sample(1:nrow(bateo.2008), 5), ]
bateo.2008[sample(1:nrow(bateo.2008), 5), ]
bateo.2008$teamID <- as.factor(bateo.2008$teamID)
levels(bateo.2008$teamID)
sample(levels(bateo.2008$teamID), 5)
bateo.2008.3teams <- bateo.2008[is.element(bateo.2008$teamID, sample(levels(bateo.2008$teamID),3)), ]
bateo.2008.3teams
summary(bateo.2008.3teams$teamID)
#tapply(x, INDEX, FUN = ..., simplify =)
data <- load('data/batting.2008.rda')
bateo.2008 <- transform(batting.2008, AVG = H/AB)
tapply(x=bateo.2008$HR, INDEX = list(bateo.2008$teamID), FUN = sum)
#tapply(x, INDEX, FUN = ..., simplify =)
data <- load('data/batting.2008.rda')
bateo.2008 <- transform(batting.2008, AVG = H/AB)
tapply(x=bateo.2008$HR, INDEX = list(bateo.2008$teamID), FUN = sum)
tapply(bateo.2008$HR, INDEX = list(bateo.2008$teamID), FUN = sum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = fivenum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = sevennum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = sixnum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = fivenum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = cumsum(H))
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = cumsum(bateo.2008$H))
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = fivesum)
tapply((bateo.2008$H/bateo.2008$AB), INDEX = list(bateo.2008$lgID), FUN = fivenum)
bateo.nombre.2008 <- bateo.2008[bateo.2008$yearID == 2008,]
tapply(bateo.2008$HR, INDEX = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean)
by(bateo.2008[, c("H", "2B", "3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = median)
by(bateo.2008[, c("H", "2B", "3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = median)
View(bateo.2008)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = median)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean, drop = FALSE)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean, drop = FALSE)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean, drop = TRUE)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
by(bateo.2008[, c("H","HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
by(bateo.2008[, c("HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
by(bateo.2008[, c("H", "X2B", "X3B", "HR")],
INDICES=list(bateo.nombre.2008$lgID,
bateo.nombre.2008$bats), FUN=mean)
by(bateo.2008[, c("H","HR")],
INDICES=list(bateo.nombre.2008$lgID,
bateo.nombre.2008$bats), FUN=mean)
by(bateo.2008[, c("H","HR")],
INDICES=list(bateo.nombre.2008$lgID,
bateo.nombre.2008$bats), FUN=sum)
by(bateo.2008[, c("HR", "H")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
aggregate(bateo.2008[, c("AB", "H", "HR")],
by = list(bateo.2008$teamID), FUN = sum)
aggregate(bateo.2008[, c("AB", "H","BB", "HR")],
by = list(bateo.2008$teamID), FUN = sum)
aggregate(bateo.2008[, c("AB", "H","BB", "X2B", "X3B" "HR")],
aggregate(bateo.2008[, c("AB", "H","BB", "x2B", "x3B" "HR")],
#aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1, ts.eps = getOption("ts.eps"), ...)
str(bateo.2008)
aggregate(bateo.2008[, c("AB", "H","BB", "X2B", "X3B" "HR")],
aggregate(bateo.2008[, c("AB", "H","BB", "X2B", "X3B","HR")],
by = list(bateo.2008$teamID), FUN = sum)
by(bateo.2008[, c("H","BB", "X2B", "X3B","HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
by(bateo.2008[, c("H","BB", "X2B", "X3B","HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = mean)
by(bateo.2008[, c("H","BB", "X2B", "X3B","HR")],
INDICES = list(bateo.nombre.2008$lgID, bateo.nombre.2008$bats), FUN = sum)
rowsum(bateo.2008[, c("AB", "H","BB", "X2B", "X3B","HR")],
group = bateo.2008$teamID)
HR.count <- tabulate(bateo.nombre.2008$HR)
HR.count
# tabulate doesn't label results, so let's add names:
names(HR.count) <- 0:(length(HR.count)-1)
HR.count
table(bateo.nombre.2008$bats)
table(bateo.2008[, c("bats", "throws")])
# La función xtabs funciona igual que la tabla, pero le permite especificar las agrupaciones
# especificando una fórmula y un marco de datos. En muchos casos, esto puede ahorrarle algo de tipeo.
xtabs(~bats+lgID, bateo.2008)
# first, add batting average to the data frame:
bateo.w.names.2008 <- transform('data/batting.2008.rda', AVG = H/AB)
# first, add batting average to the data frame:
bateo.w.names.2008 <- transform(bateo.2008, AVG = H/AB)
#now, select a subset of players with over 100 AB (for some statistical significate)
bateo.2008.over100AB <- subset(bateo.2008, subset = (AB > 100 ))
#Finally, split the results into 10 bins
bateo.2008.bins <- cut(bateo.2008.over100AB$AVG, breaks = 10)
table(bateo.2008.bins)
data <- load('data/batting.2008.rda')
bateo.2008 <- transform(batting.2008, AVG = H/AB)
View(bateo.2008)
m <- matrix(1:10 nrow = 5)
m
m <- matrix(1:10, nrow = 5)
m
t(m)
v <- 1:10
v
t(v)
